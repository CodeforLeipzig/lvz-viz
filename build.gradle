plugins {
  id 'com.adarshr.test-logger' version '2.0.0'
  id 'com.avast.gradle.docker-compose' version '0.9.5'
  id 'com.gorylenko.gradle-git-properties' version '2.2.0'
  id 'eclipse-wtp'
  id 'idea'
  id 'io.franzbecker.gradle-lombok' version '3.2.0'
  id 'jacoco'
  id 'java'
  id 'org.ec4j.editorconfig' version '0.0.3'
  id 'org.sonarqube' version '2.8'
  id 'org.springframework.boot' version '1.4.7.RELEASE'
}

group = 'de.codefor.le'
version = '2.0.0-SNAPSHOT'
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

defaultTasks 'build'

ext {
  junitVersion = '5.5.2'
}

// update vulnerable transitive jackson dependencies for spring-boot and elasticsearch
// see https://app.snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-467016
ext['jackson.version'] = '2.10.0'

springBoot {
  executable = true
  mainClass = 'de.codefor.le.LvzViz'
}

repositories {
  mavenCentral()
  // needed for spring-test-junit5
  maven { url 'https://jitpack.io' }
}
dependencies {
  compile        "com.google.guava:guava:28.1-jre",
                 "org.jsoup:jsoup:1.12.1",
                 "edu.stanford.nlp:stanford-corenlp:3.9.2"

  // update vulnerable transitive dependencies for stanford-corenlp
  // see https://app.snyk.io/vuln/SNYK-JAVA-COMGOOGLEPROTOBUF-173761
  // see https://app.snyk.io/vuln/SNYK-JAVA-XALAN-31385
  // see https://app.snyk.io/vuln/SNYK-JAVA-XERCES-31585
  runtime     "com.google.protobuf:protobuf-java:3.10.0",
              "xalan:xalan:2.7.2",
              "xerces:xercesImpl:2.12.0"

  compile        "org.springframework.boot:spring-boot-starter-web",
                 "org.springframework.boot:spring-boot-starter-logging",
                 "org.springframework.boot:spring-boot-starter-data-elasticsearch",
                 "org.springframework.boot:spring-boot-starter-actuator"

  runtime "net.java.dev.jna:jna"

  testImplementation("org.springframework.boot:spring-boot-starter-test") {
    exclude group: 'junit', module: 'junit'
  }
  testImplementation "org.assertj:assertj-core:3.13.2"

  testImplementation "com.github.sbrannen:spring-test-junit5:1.5.0",
                     "org.junit.jupiter:junit-jupiter-api:${junitVersion}",
                     "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
}

dockerCompose {
  captureContainersOutput = false
}

editorconfig {
  includes = ['src/**', '*']
  excludes = ['**/images', '**/vendor', '*.gz', '*.log']
}

check.dependsOn editorconfigCheck

generateGitProperties {
  // see https://github.com/n0mer/gradle-git-properties/issues/35
  onlyIf {
    !source.isEmpty()
  }
}

jacocoTestReport {
  reports {
    xml.enabled true
    html.enabled false
  }
}

check.dependsOn jacocoTestReport

test {
  testLogging {
    exceptionFormat = 'full'
  }
  maxHeapSize = "2048m"
  useJUnitPlatform()
}

testlogger {
  showStandardStreams false
}

// see http://www.rehpoehler.de/gradle/Gradle-Eclipse-WTP-Beispiel.html
eclipse {
  project {
    natures = ['org.springframework.ide.eclipse.core.springnature',   // if you use springsourcr sts
               'org.springsource.ide.eclipse.gradle.core.nature',     // gradle plugin
               'org.eclipse.jdt.core.javanature',                     // default java
               'org.eclipse.wst.common.modulecore.ModuleCoreNature',  // default
               'org.eclipse.wst.common.project.facet.core.nature']    // if you want a facetted projekt

    buildCommand 'org.springframework.ide.eclipse.core.springbuilder' // Spring STS
  }

  classpath {
    defaultOutputDir = file('build/classes')

    downloadSources = true
    downloadJavadoc = false
  }

  wtp {
    facet {
      facet name: 'jst.web', version: '3.1' // Servlet 3.1
    }
  }
}
